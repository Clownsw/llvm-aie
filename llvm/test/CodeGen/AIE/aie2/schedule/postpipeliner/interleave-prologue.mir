# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 -O2 --run-pass=postmisched --aie-loop-min-tripcount=16 --aie-addrspace-none-is-safe %s -o - | FileCheck %s

# A couple of tests to verify how the SWP prologue is interleaved with the loop pre-header.

---
name:            load_accum
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: load_accum
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $lc = ADD_NC $r0, -7
  ; CHECK-NEXT:   BUNDLE implicit-def $r1, implicit-def $ls {
  ; CHECK-NEXT:     $r1 = MOVA_lda_cg 0
  ; CHECK-NEXT:     $ls = MOVXM_lng_cg %bb.2
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $x0 = VBCST_16 killed $r1
  ; CHECK-NEXT:   $le = MOVXM_lng_cg <mcsymbol .L_LEnd0>
  ; CHECK-NEXT:   $x6, $p0 = VLDB_UNPACK_S16_S8_ag_pstm_nrm killed $p0, $m0
  ; CHECK-NEXT:   $x6, $p0 = VLDB_UNPACK_S16_S8_ag_pstm_nrm killed $p0, $m0
  ; CHECK-NEXT:   $x6, $p0 = VLDB_UNPACK_S16_S8_ag_pstm_nrm killed $p0, $m0
  ; CHECK-NEXT:   $x6, $p0 = VLDB_UNPACK_S16_S8_ag_pstm_nrm killed $p0, $m0
  ; CHECK-NEXT:   $x6, $p0 = VLDB_UNPACK_S16_S8_ag_pstm_nrm killed $p0, $m0
  ; CHECK-NEXT:   $x6, $p0 = VLDB_UNPACK_S16_S8_ag_pstm_nrm killed $p0, $m0
  ; CHECK-NEXT:   $x6, $p0 = VLDB_UNPACK_S16_S8_ag_pstm_nrm killed $p0, $m0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $m0, $x0, $x2, $x4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $x6, implicit-def $wl6, implicit-def $wh6, implicit-def $p0, implicit-def $x0, implicit-def $wl0, implicit-def $wh0, implicit killed $p0, implicit $m0, implicit killed $x0 {
  ; CHECK-NEXT:     $x6, $p0 = VLDB_UNPACK_S16_S8_ag_pstm_nrm killed $p0, $m0
  ; CHECK-NEXT:     $x0 = VADD_16 killed $x0, internal $x6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $p0, $p1, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, killed $x6
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   VST_PACK_S8_S16_ag_idx_imm killed $p1, 0, killed $x0, implicit $crsat
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $p0, $p1, $r0

    $lc = ADD_NC $r0, 0
    $ls = MOVXM_lng_cg %bb.2
    $le = MOVXM_lng_cg <mcsymbol .L_LEnd0>
    $r1 = MOV_RLC_imm10_pseudo 0
    $x0 = VBCST_16 $r1

  bb.1:
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
    liveins: $p0, $p1, $r0, $m0, $x0, $x2, $x4

    $x6, $p0 = VLDB_UNPACK_S16_S8_ag_pstm_nrm $p0, $m0
    $x0 = VADD_16 $x0, $x6
    PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.1

  bb.2:
    liveins: $p0, $p1, $x0
    VST_PACK_S8_S16_ag_idx_imm $p1, 0, $x0, implicit $crsat
    RET implicit $lr
    DelayedSchedBarrier
...

# Same as above, but VLD and VUNPACK are not combined.
# This creates a lot of bundles in the prologue and verifies how those can
# be extended with instructions from the preheader.
---
name:            load_unpack_accum
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: load_unpack_accum
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $lc = ADD_NC $r0, -8
  ; CHECK-NEXT:   BUNDLE implicit-def $r1, implicit-def $ls {
  ; CHECK-NEXT:     $r1 = MOVA_lda_cg 0
  ; CHECK-NEXT:     $ls = MOVXM_lng_cg %bb.2
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $x0 = VBCST_16 killed $r1
  ; CHECK-NEXT:   $le = MOVXM_lng_cg <mcsymbol .L_LEnd0>
  ; CHECK-NEXT:   $wl4, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:   BUNDLE implicit-def $wl4, implicit-def $p0, implicit-def $x6, implicit-def $wl6, implicit-def $wh6, implicit killed $p0, implicit $m0 {
  ; CHECK-NEXT:     $wl4, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:     $x6 = VUNPACK_S16_S8 internal $wl4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $wl4, implicit-def $p0, implicit-def $x6, implicit-def $wl6, implicit-def $wh6, implicit killed $p0, implicit $m0 {
  ; CHECK-NEXT:     $wl4, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:     $x6 = VUNPACK_S16_S8 internal $wl4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $wl4, implicit-def $p0, implicit-def $x6, implicit-def $wl6, implicit-def $wh6, implicit killed $p0, implicit $m0 {
  ; CHECK-NEXT:     $wl4, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:     $x6 = VUNPACK_S16_S8 internal $wl4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $wl4, implicit-def $p0, implicit-def $x6, implicit-def $wl6, implicit-def $wh6, implicit killed $p0, implicit $m0 {
  ; CHECK-NEXT:     $wl4, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:     $x6 = VUNPACK_S16_S8 internal $wl4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $wl4, implicit-def $p0, implicit-def $x6, implicit-def $wl6, implicit-def $wh6, implicit killed $p0, implicit $m0 {
  ; CHECK-NEXT:     $wl4, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:     $x6 = VUNPACK_S16_S8 internal $wl4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $wl4, implicit-def $p0, implicit-def $x6, implicit-def $wl6, implicit-def $wh6, implicit killed $p0, implicit $m0 {
  ; CHECK-NEXT:     $wl4, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:     $x6 = VUNPACK_S16_S8 internal $wl4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $wl4, implicit-def $p0, implicit-def $x6, implicit-def $wl6, implicit-def $wh6, implicit killed $p0, implicit $m0 {
  ; CHECK-NEXT:     $wl4, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:     $x6 = VUNPACK_S16_S8 internal $wl4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $m0, $x0, $x2, $x4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $wl4, implicit-def $p0, implicit-def $x6, implicit-def $wl6, implicit-def $wh6, implicit-def $x0, implicit-def $wl0, implicit-def $wh0, implicit killed $p0, implicit $m0, implicit killed $x0 {
  ; CHECK-NEXT:     $wl4, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:     $x6 = VUNPACK_S16_S8 internal $wl4
  ; CHECK-NEXT:     $x0 = VADD_16 killed $x0, internal $x6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $p0, $p1, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $x6, implicit-def $wl6, implicit-def $wh6, implicit-def $x0, implicit-def $wl0, implicit-def $wh0, implicit killed $wl4, implicit killed $x0 {
  ; CHECK-NEXT:     $x6 = VUNPACK_S16_S8 killed $wl4
  ; CHECK-NEXT:     $x0 = VADD_16 killed $x0, internal $x6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, killed $x6
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   VST_PACK_S8_S16_ag_idx_imm killed $p1, 0, killed $x0, implicit $crsat
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $p0, $p1, $r0

    $lc = ADD_NC $r0, 0
    $ls = MOVXM_lng_cg %bb.2
    $le = MOVXM_lng_cg <mcsymbol .L_LEnd0>
    $r1 = MOV_RLC_imm10_pseudo 0
    $x0 = VBCST_16 $r1

  bb.1:
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
    liveins: $p0, $p1, $r0, $m0, $x0, $x2, $x4

    $wl4, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p0, $m0
    $x6 = VUNPACK_S16_S8 $wl4
    $x0 = VADD_16 $x0, $x6
    PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.1

  bb.2:
    liveins: $p0, $p1, $x0
    VST_PACK_S8_S16_ag_idx_imm $p1, 0, $x0, implicit $crsat
    RET implicit $lr
    DelayedSchedBarrier
...

# A test where the SWP prologue only has bundled instructions.
# This is to check how those can be extended with instructions from
# the pre-header when it gets scheduled.
---
name:            load_accum_512
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: load_accum_512
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $lc = ADD_NC $r0, -7
  ; CHECK-NEXT:   BUNDLE implicit-def $r1, implicit-def $ls {
  ; CHECK-NEXT:     $r1 = MOVA_lda_cg 0
  ; CHECK-NEXT:     $ls = MOVXM_lng_cg %bb.2
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $x0 = VBCST_16 killed $r1
  ; CHECK-NEXT:   $le = MOVXM_lng_cg <mcsymbol .L_LEnd0>
  ; CHECK-NEXT:   BUNDLE implicit-def $wh6, implicit-def $wl6, implicit-def $p0, implicit killed $p0 {
  ; CHECK-NEXT:     $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32 :: (load (<16 x s16>))
  ; CHECK-NEXT:     $wl6, $p0 = VLDB_dmw_ldb_ag_pstm_nrm_imm killed $p0, 64 :: (load (<16 x s16>))
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $wh6, implicit-def $wl6, implicit-def $p0, implicit killed $p0 {
  ; CHECK-NEXT:     $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32 :: (load (<16 x s16>))
  ; CHECK-NEXT:     $wl6, $p0 = VLDB_dmw_ldb_ag_pstm_nrm_imm killed $p0, 64 :: (load (<16 x s16>))
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $wh6, implicit-def $wl6, implicit-def $p0, implicit killed $p0 {
  ; CHECK-NEXT:     $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32 :: (load (<16 x s16>))
  ; CHECK-NEXT:     $wl6, $p0 = VLDB_dmw_ldb_ag_pstm_nrm_imm killed $p0, 64 :: (load (<16 x s16>))
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $wh6, implicit-def $wl6, implicit-def $p0, implicit killed $p0 {
  ; CHECK-NEXT:     $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32 :: (load (<16 x s16>))
  ; CHECK-NEXT:     $wl6, $p0 = VLDB_dmw_ldb_ag_pstm_nrm_imm killed $p0, 64 :: (load (<16 x s16>))
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $wh6, implicit-def $wl6, implicit-def $p0, implicit killed $p0 {
  ; CHECK-NEXT:     $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32 :: (load (<16 x s16>))
  ; CHECK-NEXT:     $wl6, $p0 = VLDB_dmw_ldb_ag_pstm_nrm_imm killed $p0, 64 :: (load (<16 x s16>))
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $wh6, implicit-def $wl6, implicit-def $p0, implicit killed $p0 {
  ; CHECK-NEXT:     $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32 :: (load (<16 x s16>))
  ; CHECK-NEXT:     $wl6, $p0 = VLDB_dmw_ldb_ag_pstm_nrm_imm killed $p0, 64 :: (load (<16 x s16>))
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $wh6, implicit-def $wl6, implicit-def $p0, implicit killed $p0 {
  ; CHECK-NEXT:     $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32 :: (load (<16 x s16>))
  ; CHECK-NEXT:     $wl6, $p0 = VLDB_dmw_ldb_ag_pstm_nrm_imm killed $p0, 64 :: (load (<16 x s16>))
  ; CHECK-NEXT:   }
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $m0, $x0, $x2, $x4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $wh6, implicit-def $wl6, implicit-def $p0, implicit-def $x0, implicit-def $wl0, implicit-def $wh0, implicit killed $p0, implicit killed $x0, implicit killed $x6 {
  ; CHECK-NEXT:     $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32 :: (load (<16 x s16>))
  ; CHECK-NEXT:     $wl6, $p0 = VLDB_dmw_ldb_ag_pstm_nrm_imm killed $p0, 64 :: (load (<16 x s16>))
  ; CHECK-NEXT:     $x0 = VADD_16 killed $x0, killed $x6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $p0, $p1, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, $x6
  ; CHECK-NEXT:   $x0 = VADD_16 killed $x0, killed $x6
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   VST_PACK_S8_S16_ag_idx_imm killed $p1, 0, killed $x0, implicit $crsat
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $p0, $p1, $r0

    $lc = ADD_NC $r0, 0
    $ls = MOVXM_lng_cg %bb.2
    $le = MOVXM_lng_cg <mcsymbol .L_LEnd0>
    $r1 = MOV_RLC_imm10_pseudo 0
    $x0 = VBCST_16 $r1

  bb.1:
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
    liveins: $p0, $p1, $r0, $m0, $x0, $x2, $x4

    $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32 :: (load (<16 x s16>))
    $wl6, $p0 = VLDB_dmw_ldb_ag_pstm_nrm_imm $p0, 64 :: (load (<16 x s16>))
    $x0 = VADD_16 $x0, $x6
    PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.1

  bb.2:
    liveins: $p0, $p1, $x0
    VST_PACK_S8_S16_ag_idx_imm $p1, 0, $x0, implicit $crsat
    RET implicit $lr
    DelayedSchedBarrier
...

# A more complex II=2 SWP where there is more to merge in the prologue
# with the pre-header
---
name:            load_shuffle_accum
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: load_shuffle_accum
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $p2, $p3, $r0, $r1, $r2, $s0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $dj0 = MOVA_lda_cg 64
  ; CHECK-NEXT:   $x0 = VLDB_UNPACK_S16_S8_ag_idx $p2, killed $dj0
  ; CHECK-NEXT:   $r8 = LDA_dms_lda_idx_imm killed $p3, 0
  ; CHECK-NEXT:   $bmh2 = VLDA_UPS_S32_S16_ag_idx_imm $s0, $p2, 32, implicit-def $srups_of, implicit $crsat
  ; CHECK-NEXT:   $bml2 = VLDA_UPS_S32_S16_ag_idx_imm $s0, killed $p2, 0, implicit-def $srups_of, implicit $crsat
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $lc = ADD_NC killed $r0, -5
  ; CHECK-NEXT:   $ls = MOVXM_lng_cg %bb.2
  ; CHECK-NEXT:   $le = MOVXM_lng_cg <mcsymbol .L_LEnd0>
  ; CHECK-NEXT:   $x1 = VBCST_16 killed $r1
  ; CHECK-NEXT:   BUNDLE implicit-def $r4, implicit-def $x2, implicit-def $wl2, implicit-def $wh2, implicit killed $r2 {
  ; CHECK-NEXT:     $r4 = MOVA_lda_cg 0
  ; CHECK-NEXT:     $x2 = VBCST_16 killed $r2
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32
  ; CHECK-NEXT:   $wl6, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:   $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32
  ; CHECK-NEXT:   $wl6, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:   $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32
  ; CHECK-NEXT:   $wl6, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:   $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32
  ; CHECK-NEXT:   $wl6, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:   BUNDLE implicit-def $wh6, implicit-def $x5, implicit-def $wl5, implicit-def $wh5, implicit $p0, implicit killed $x6, implicit $x1, implicit $r8 {
  ; CHECK-NEXT:     $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32
  ; CHECK-NEXT:     $x5 = VSHUFFLE killed $x6, $x1, $r8
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $wl6, implicit-def $p0, implicit-def $x5, implicit-def $wl5, implicit-def $wh5, implicit killed $p0, implicit $m0, implicit killed $x5, implicit $x2, implicit $r8 {
  ; CHECK-NEXT:     $wl6, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:     $x5 = VSHUFFLE killed $x5, $x2, $r8
  ; CHECK-NEXT:   }
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r4, $r8, $m0, $x0, $x1, $x2, $cm2, $s0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $wh6, implicit-def $x5, implicit-def $wl5, implicit-def $wh5, implicit $p0, implicit killed $x6, implicit $x1, implicit $r8 {
  ; CHECK-NEXT:     $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32
  ; CHECK-NEXT:     $x5 = VSHUFFLE killed $x6, $x1, $r8
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $wl6, implicit-def $p0, implicit-def $x5, implicit-def $wl5, implicit-def $wh5, implicit-def $cm2, implicit-def $bml2, implicit-def $amll2, implicit-def $amlh2, implicit-def $bmh2, implicit-def $amhl2, implicit-def $amhh2, implicit killed $p0, implicit $m0, implicit killed $x5, implicit $x2, implicit $r8, implicit killed $cm2, implicit $x0, implicit $r4 {
  ; CHECK-NEXT:     $wl6, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, $m0
  ; CHECK-NEXT:     $x5 = VSHUFFLE killed $x5, $x2, $r8
  ; CHECK-NEXT:     $cm2 = VMAC_vmac_cm_core_dense killed $cm2, internal $x5, $x0, $r4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $p0, $p1, $cm2, $s0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $x5 = VSHUFFLE $x6, $x1, $r8
  ; CHECK-NEXT:   BUNDLE implicit-def $x5, implicit-def $wl5, implicit-def $wh5, implicit-def $cm2, implicit-def $bml2, implicit-def $amll2, implicit-def $amlh2, implicit-def $bmh2, implicit-def $amhl2, implicit-def $amhh2, implicit killed $x5, implicit $x2, implicit $r8, implicit killed $cm2, implicit $x0, implicit $r4 {
  ; CHECK-NEXT:     $x5 = VSHUFFLE killed $x5, $x2, $r8
  ; CHECK-NEXT:     $cm2 = VMAC_vmac_cm_core_dense killed $cm2, internal $x5, $x0, $r4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $x5 = VSHUFFLE $x6, $x1, $r8
  ; CHECK-NEXT:   BUNDLE implicit-def $x5, implicit-def $wl5, implicit-def $wh5, implicit-def $cm2, implicit-def $bml2, implicit-def $amll2, implicit-def $amlh2, implicit-def $bmh2, implicit-def $amhl2, implicit-def $amhh2, implicit killed $x5, implicit $x2, implicit $r8, implicit killed $cm2, implicit $x0, implicit $r4 {
  ; CHECK-NEXT:     $x5 = VSHUFFLE killed $x5, $x2, $r8
  ; CHECK-NEXT:     $cm2 = VMAC_vmac_cm_core_dense killed $cm2, internal $x5, $x0, $r4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $x5 = VSHUFFLE $x6, $x1, $r8
  ; CHECK-NEXT:   BUNDLE implicit-def $x5, implicit-def $wl5, implicit-def $wh5, implicit-def $cm2, implicit-def $bml2, implicit-def $amll2, implicit-def $amlh2, implicit-def $bmh2, implicit-def $amhl2, implicit-def $amhh2, implicit killed $x5, implicit $x2, implicit $r8, implicit killed $cm2, implicit $x0, implicit $r4 {
  ; CHECK-NEXT:     $x5 = VSHUFFLE killed $x5, $x2, $r8
  ; CHECK-NEXT:     $cm2 = VMAC_vmac_cm_core_dense killed $cm2, internal $x5, $x0, $r4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $x5 = VSHUFFLE killed $x6, killed $x1, $r8
  ; CHECK-NEXT:   BUNDLE implicit-def $x5, implicit-def $wl5, implicit-def $wh5, implicit-def $cm2, implicit-def $bml2, implicit-def $amll2, implicit-def $amlh2, implicit-def $bmh2, implicit-def $amhl2, implicit-def $amhh2, implicit killed $x5, implicit killed $x2, implicit killed $r8, implicit killed $cm2, implicit $x0, implicit $r4 {
  ; CHECK-NEXT:     $x5 = VSHUFFLE killed $x5, killed $x2, killed $r8
  ; CHECK-NEXT:     $cm2 = VMAC_vmac_cm_core_dense killed $cm2, internal $x5, $x0, $r4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $cm2 = VMAC_vmac_cm_core_dense killed $cm2, killed $x5, killed $x0, killed $r4
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   VST_SRS_S8_S32_ag_idx_imm killed $p1, 0, killed $cm2, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $p0, $p1, $p2, $p3, $r0, $r1, $r2, $s0

    $lc = ADD_NC $r0, 0
    $ls = MOVXM_lng_cg %bb.2
    $le = MOVXM_lng_cg <mcsymbol .L_LEnd0>
    $r4 = MOV_RLC_imm10_pseudo 0
    $x1 = VBCST_16 $r1
    $x2 = VBCST_16 $r2
    $dj0 = MOV_PD_imm10_pseudo 64
    $x0 = VLDB_UNPACK_S16_S8_ag_idx $p2, $dj0
    $r8 = LDA_dms_lda_idx_imm killed $p3, 0
    $bmh2 = VLDA_UPS_S32_S16_ag_idx_imm $s0, $p2, 32, implicit-def $srups_of, implicit $crsat
    $bml2 = VLDA_UPS_S32_S16_ag_idx_imm $s0, $p2, 0,  implicit-def $srups_of, implicit $crsat

  bb.1:
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
    liveins: $p0, $p1, $r4, $r8, $m0, $x0, $x1, $x2, $cm2, $s0
    $wh6 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32
    $wl6, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p0, $m0
    $x5 = VSHUFFLE $x6, $x1, $r8
    $x5 = VSHUFFLE $x5, $x2, $r8
    $cm2 = VMAC_vmac_cm_core_dense $cm2, $x5, $x0, $r4
    PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.1

  bb.2:
    liveins: $p0, $p1, $cm2, $s0
    VST_SRS_S8_S32_ag_idx_imm $p1, 0, $cm2, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
    RET implicit $lr
    DelayedSchedBarrier
...
