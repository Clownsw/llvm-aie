# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O2 -mtriple=aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            simple
tracksRegLiveness: true
legalized:       true
regBankSelected: true
body:             |
  ; CHECK-LABEL: name: simple
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ep = COPY $p1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   [[LDA_dms_lda_idx_imm:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (s32))
  ; CHECK-NEXT:   LoopStart [[COPY2]]
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.2(0x7c000000), %bb.1(0x04000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:er = PHI [[LDA_dms_lda_idx_imm]], %bb.0, %7, %bb.2
  ; CHECK-NEXT:   [[PHI1:%[0-9]+]]:er = PHI [[MOV_RLC_imm10_pseudo]], %bb.0, %9, %bb.2
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo1:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 2
  ; CHECK-NEXT:   [[LSHL:%[0-9]+]]:er = LSHL [[PHI1]], [[MOV_RLC_imm10_pseudo1]]
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:edj = COPY [[LSHL]]
  ; CHECK-NEXT:   [[LDA_dms_lda_idx:%[0-9]+]]:er = LDA_dms_lda_idx [[COPY1]], [[COPY3]] :: (load (s32))
  ; CHECK-NEXT:   [[ADD:%[0-9]+]]:er = nsw ADD [[PHI]], [[LDA_dms_lda_idx]], implicit-def dead $srcarry
  ; CHECK-NEXT:   ST_dms_sts_idx_imm [[ADD]], [[COPY]], 0 :: (store (s32))
  ; CHECK-NEXT:   [[ADD_add_r_ri:%[0-9]+]]:er = nuw nsw ADD_add_r_ri [[PHI1]], 1, implicit-def dead $srcarry
  ; CHECK-NEXT:   PseudoLoopEnd %bb.2, <mcsymbol .L_1120>
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  bb.0:
    successors: %bb.2(0x80000000)
    liveins: $p0, $p1, $r0

    %0:ptrregbank(p0) = COPY $p0
    %1:ptrregbank(p0) = COPY $p1
    %2:gprregbank(s32) = COPY $r0
    %3:gprregbank(s32) = G_CONSTANT i32 1
    %4:gprregbank(s32) = G_CONSTANT i32 0
    %5:gprregbank(s32) = G_LOAD %0(p0) :: (load (s32))
    G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.set.loop.iterations), %2(s32)
    G_BR %bb.2

  bb.1:
    PseudoRET implicit $lr

  bb.2:
    successors: %bb.2(0x7c000000), %bb.1(0x04000000)

    %6:gprregbank(s32) = G_PHI %5(s32), %bb.0, %7(s32), %bb.2
    %8:gprregbank(s32) = G_PHI %4(s32), %bb.0, %9(s32), %bb.2
    %23:gprregbank(s32) = G_CONSTANT i32 2
    %22:gprregbank(s32) = G_SHL %8, %23(s32)
    %12:modregbank(s20) = G_TRUNC %22(s32)
    %15:gprregbank(s32) = G_AIE_OFFSET_LOAD %1(p0), %12(s20) :: (load (s32))
    %7:gprregbank(s32) = nsw G_ADD %6, %15
    G_STORE %7(s32), %0(p0) :: (store (s32))
    %9:gprregbank(s32) = nuw nsw G_ADD %8, %3
    %19:gprregbank(s32) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.loop.decrement), %3(s32)
    %20:gprregbank(s32) = G_ASSERT_ZEXT %19, 1
    G_BRCOND %20(s32), %bb.2
    G_BR %bb.1

...
